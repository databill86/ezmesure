{
  "openapi": "3.0.0",
  "info": {
    "title": "API ezMESURE",
    "version": "v1",
    "description": "Use this API to interact with [ezMESURE](https://ezmesure.couperin.org).",
    "license": {
      "name": "CeCILL 2.1",
      "url": "http://www.cecill.info/licences/Licence_CeCILL_V2.1-en.html"
    }
  },
  "servers": [
    {
      "url": "https://ezmesure.couperin.org/api",
      "description": "Production server"
    },
    {
      "url": "https://ezmesure-preprod.couperin.org/api",
      "description": "Staging server for testing"
    }
  ],
  "tags": [
    {
      "name": "Indices",
      "description": "Manage your indices"
    },
    {
      "name": "Authentication",
      "description": "Everything related to your profile"
    },
    {
      "name": "Files",
      "description": "Manage your hosted files"
    },
    {
      "name": "Metrics",
      "description": "Get metrics from indices"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "responses": {
      "UnauthorizedError": {
        "description": "Access token is missing or invalid",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "ForbiddenError": {
        "description": "Action is forbidden for the authenticated user",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    },
    "schemas": {
      "Error": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "Authentication Error"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "example": "john.doo"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "kibana_user",
              "univ-foobar"
            ]
          },
          "full_name": {
            "type": "string",
            "example": "John Doo"
          },
          "email": {
            "type": "string",
            "example": "doo.john@universe.org"
          },
          "enabled": {
            "type": "boolean"
          },
          "metadata": {
            "type": "object",
            "properties": {
              "createdAt": {
                "type": "string",
                "example": "2018-04-12T13:33:00.930Z"
              },
              "updatedAt": {
                "type": "string",
                "example": "2018-05-15T03:23:43.391Z"
              },
              "remoteUser": {
                "type": "string",
                "example": "doo.john.6"
              },
              "persistentId": {
                "type": "string",
                "example": "https://universe.org/idp!https://ezmesure.couperin.org/sp!XJ3AGRS5J74DD6PMGS7UD4M5UOGIWQPN"
              },
              "uid": {
                "type": "string",
                "example": "doo.john.6"
              },
              "unit": {
                "type": "string",
                "example": "PL123"
              },
              "idp": {
                "type": "string",
                "example": "https://universe.org/idp"
              },
              "org": {
                "type": "string",
                "example": "UNIVERSE"
              },
              "affiliation": {
                "type": "string",
                "example": "employee@universe.org"
              },
              "acceptedTerms": {
                "type": "boolean",
                "example": true
              },
              "eppn": {
                "type": "string",
                "example": "doo.john.6@universe.org"
              }
            }
          }
        }
      },
      "IndexList": {
        "type": "object",
        "properties": {
          "_shards": {
            "type": "object",
            "properties": {
              "total": { "type": "integer" },
              "successful": { "type": "integer" },
              "failed": { "type": "integer" }
            }
          },
          "_all": {
            "type": "object",
            "properties": {
              "primaries": {
                "type": "object",
                "properties": {
                  "docs": {
                    "type": "object",
                    "properties": {
                      "count": { "type": "integer" },
                      "deleted": { "type": "integer" }
                    }
                  }
                }
              },
              "total": {
                "type": "object",
                "properties": {
                  "docs": {
                    "type": "object",
                    "properties": {
                      "count": { "type": "integer" },
                      "deleted": { "type": "integer" }
                    }
                  }
                }
              }
            }
          },
          "indices": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "primaries": {
                  "type": "object",
                  "properties": {
                    "docs": {
                      "type": "object",
                      "properties": {
                        "count": { "type": "integer" },
                        "deleted": { "type": "integer" }
                      }
                    }
                  }
                },
                "total": {
                  "type": "object",
                  "properties": {
                    "docs": {
                      "type": "object",
                      "properties": {
                        "count": { "type": "integer" },
                        "deleted": { "type": "integer" }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "IndexInsert": {
        "type": "object",
        "properties": {
          "total": { "type": "integer" },
          "inserted": { "type": "integer" },
          "updated": { "type": "integer" },
          "failed": { "type": "integer" },
          "errors": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Metrics": {
        "type": "object",
        "properties": {
          "took": { "type": "integer" },
          "docs": { "type": "integer" },
          "dateCoverage": {
            "type": "object",
            "properties": {
              "min": { "type": "integer" },
              "max": { "type": "integer" }
            }
          },
          "metrics": {
            "type": "object",
            "properties": {
              "days": { "type": "integer" },
              "titles": { "type": "integer" },
              "platforms": { "type": "integer" },
              "indices": { "type": "integer" }
            }
          }
        }
      },
      "FileList": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "name": { "type": "string" },
            "size": { "type": "integer" },
            "createdAt": { "type": "integer" },
            "lastModified": { "type": "integer" }
          }
        }
      }
    }
  },
  "paths": {
    "/": {
      "get": {
        "summary": "Ping the API",
        "description": "This route just serve as a ping for now.",
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "OK"
                }
              }
            }
          }
        }
      }
    },
    "/profile": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Fetch profile",
        "description": "Get the profile associated with the JWT token.",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/profile/token": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Get an authorization token",
        "description": "Actually requires a JWT token (typically stored in cookies). This route is used to provide a token from the user space.",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Token generated successfuly",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImpvaG4uZG9lIiwiZW1haWwiOiJkb28uam9obkB1bml2ZXJzZS5vcmciLCJpYXQiOjE1MTYyMzkwMjJ9.QsXZLquqEZY4q0XhDEvbEm_LzYEuPToboyUZFZrQSbE"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/profile/terms/accept": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Accept terms of service",
        "description": "Accept terms of service. You should read them first !",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "204": {
            "description": "Terms accepted successfuly"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/profile/password/reset": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Reset kibana password",
        "description": "Reset kibana password of the authenticated user.",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "204": {
            "description": "Password successfuly reset"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/logs": {
      "get": {
        "tags": [
          "Indices"
        ],
        "summary": "List existing indices",
        "description": "List the existing indices that you can access.",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndexList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/logs/{index}": {
      "post": {
        "tags": [
          "Indices"
        ],
        "summary": "Insert data into an index",
        "description": "Insert consultation events into an index.",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "index",
            "schema": {
              "type": "string",
              "example": "univ-foobar"
            },
            "description": "the index where the data should be inserted",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            },
            "text/csv": {
              "schema": {
                "type": "object",
                "required": [
                  "datetime",
                  "log_id",
                  "rtype",
                  "mime",
                  "title_id",
                  "doi"
                ],
                "properties": {
                  "datetime": { "type": "string" },
                  "log_id": { "type": "string" },
                  "rtype": { "type": "string", "nullable": true },
                  "mime": { "type": "string", "nullable": true },
                  "title_id": { "type": "string", "nullable": true },
                  "doi": { "type": "string", "nullable": true }
                },
                "additionalProperties": {
                  "type": "string"
                },
                "example": {
                  "datetime": "2018-03-22T11:37:42+02:00",
                  "platform": "npg",
                  "rtype": "ARTICLE",
                  "mime": "HTML",
                  "domain": "www.nature.com",
                  "log_id": "d5d680b88def9bc4b41d4b94f22d60514e54689e",
                  "url": "https://www.nature.com/articles/s41564-018-0156-0",
                  "status": "200"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndexInsert"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          }
        }
      }
    },
    "/logs/{index}/tops": {
      "get": {
        "tags": [
          "Indices"
        ],
        "summary": "Get top metrics for an index",
        "description": "Get top metrics for an index.",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "index",
            "schema": {
              "type": "string",
              "example": "univ-foobar"
            },
            "description": "the index to get tops from",
            "required": true
          },
          {
            "in": "query",
            "name": "period",
            "description": "The covered period.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "today",
                "yersteday",
                "current_week",
                "last_week",
                "current_month",
                "last_month",
                "current_year",
                "last_year",
                "all"
              ]
            }
          },
          {
            "in": "query",
            "name": "size",
            "description": "The size of the tops.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 50,
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Metrics"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/files": {
      "get": {
        "tags": [
          "Files"
        ],
        "summary": "List your hosted files",
        "description": "List your hosted files.",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/files/{filename}": {
      "delete": {
        "tags": [
          "Files"
        ],
        "summary": "Remove a file from your hosted files",
        "description": "Remove a file from your hosted files.",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "filename",
            "schema": {
              "type": "string",
              "example": "univ-foobar_2017-08-17.csv"
            },
            "description": "the file to be removed",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "File successfuly removed"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/files/delete_batch": {
      "post": {
        "tags": [
          "Files"
        ],
        "summary": "Remove a list of files from your hosted files",
        "description": "Remove a list of files from your hosted files.",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "entries": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "univ-foobar_2017-08-17.csv"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "File successfuly removed"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/metrics": {
      "get": {
        "tags": [
          "Metrics"
        ],
        "summary": "Get general metrics",
        "description": "Get general metrics from data hosted on ezMESURE.",
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Metrics"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    }
  }
}